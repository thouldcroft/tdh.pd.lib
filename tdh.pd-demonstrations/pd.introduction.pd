#N canvas 26 23 1254 732 12;
#X obj 166 416 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-num1 empty 0 -8
0 10 -262144 -1 -1 3 256 0;
#X obj 208 476 +;
#X obj 258 416 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-num2 empty 0 -8
0 10 -262144 -1 -1 3 256 0;
#X obj 208 548 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 6 256 0;
#X text 11 328 Pure Data (abbreviated Pd) is actually a COMPUTER PROGRAMMING
LANGUAGE for media \, with a long history in the sound and electronic
music communities. It has become particularly popular with artists
because instead of requiring one to create computer code using a text
editor and actual codes for what the processes happening \, you connect
boxes that perform certain functions through lines that represent the
signal/data flow. For example \, below is what Pd code for adding the
numbers 2 and 3 together looks like \, with a text based psuedo-code
(i.e. not code from an actual programming language) \, like what you
would find in a traditional programmign language \, next to it:, f
172;
#X text 11 649 That may seem trivial \, because adding two numbers
together is a very simply task. But if what if you wanted to change
the numbers? In the traditional code you would need to need to delete
the numbers typed in \, type new numbers \, and then run the whole
program again. In Pd \, simply click and drag in the number boxes to
change the numbers! And when you click and drag in the right side box
\, you will see the results produced immediately in real-time (the
left hand box doesn't trigger the calculation to happen \, it stores
the number and waits for the right hand number to be sent). In fact
(almost) everything in Pd happens in real time., f 172;
#X text 11 720 Pd is also very popular because it is FREE and OPEN
SOURCE. This means there is (for the most part) no central author \,
and interested parties can contribute to it \, write extensions for
it \, and even develop their own take on the software... which brings
us to our next topic., f 172;
#X text 12 4014 Other Notes:, f 37;
#N canvas 134 93 920 694 pseudocode 0;
#X text 133 219 c = a + b;
#X text 113 239 output = c;
#X text 113 133 function: add_numbers;
#X text 133 175 variable integer b = 2;
#X text 133 197 variable integer c = 0;
#X text 133 155 variable integer a = 3;
#X coords 0 -1 1 1 200 180 2 100 100;
#X restore 739 407 pd pseudocode;
#X obj 11 35 cnv 15 1208 60 empty empty empty 20 12 0 14 -261234 -66577
0;
#X text 14 54 Travis Houldcroft \, 2018, f 24;
#X text 1359 3304 .;
#X text 10 7 ., f 65;
#N canvas 27 23 450 300 initialize 0;
#X obj 37 152 s \$0-num1;
#X obj 163 149 s \$0-num2;
#X obj 46 25 loadbang;
#X msg 31 90 3;
#X msg 171 88 3;
#X obj 46 47 t b b;
#N canvas 27 254 1413 585 vegas 0;
#X obj 168 60 r \$0-bang-r;
#X obj 173 351 s \$0-button1-s;
#X obj 484 350 s \$0-button4-s;
#X obj 384 349 s \$0-button3-s;
#X obj 281 350 s \$0-button2-s;
#X obj 168 125 t b b;
#X obj 173 291 select 0;
#X obj 283 291 select 1;
#X obj 383 291 select 2;
#X obj 482 288 select 3;
#X obj 179 321 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 280 321 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 381 321 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 481 321 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 174 208 metro 50;
#X obj 174 235 random 4;
#X floatatom 211 260 5 0 0 0 - - -, f 5;
#X msg 216 170 0;
#X msg 168 146 1;
#X obj 174 186 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 175 92 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 216 149 del 5000;
#X obj 682 60 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 680 32 r \$0-toggle-r;
#X obj 682 129 random 30;
#X obj 682 150 pack float \$0;
#X msg 686 185 \; \$2-colorful_canvas1-s color \$1;
#X obj 902 129 random 30;
#X obj 902 150 pack float \$0;
#X obj 1112 129 random 30;
#X obj 1112 150 pack float \$0;
#X obj 1332 129 random 30;
#X obj 1332 150 pack float \$0;
#X msg 906 185 \; \$2-colorful_canvas2-s color \$1;
#X msg 1116 185 \; \$2-colorful_canvas3-s color \$1;
#X msg 1336 185 \; \$2-colorful_canvas4-s color \$1;
#X obj 682 102 metro 100;
#X obj 902 102 metro 80;
#X obj 1112 102 metro 90;
#X obj 1332 102 metro 70;
#X obj 998 26 loadbang;
#X msg 998 50 1;
#X connect 0 0 20 0;
#X connect 5 0 18 0;
#X connect 5 1 21 0;
#X connect 6 0 10 0;
#X connect 7 0 11 0;
#X connect 8 0 12 0;
#X connect 9 0 13 0;
#X connect 10 0 1 0;
#X connect 11 0 4 0;
#X connect 12 0 3 0;
#X connect 13 0 2 0;
#X connect 14 0 15 0;
#X connect 15 0 16 0;
#X connect 15 0 6 0;
#X connect 15 0 7 0;
#X connect 15 0 8 0;
#X connect 15 0 9 0;
#X connect 17 0 19 0;
#X connect 18 0 19 0;
#X connect 19 0 14 0;
#X connect 20 0 5 0;
#X connect 21 0 17 0;
#X connect 22 0 36 0;
#X connect 22 0 37 0;
#X connect 22 0 38 0;
#X connect 22 0 39 0;
#X connect 23 0 22 0;
#X connect 24 0 25 0;
#X connect 25 0 26 0;
#X connect 27 0 28 0;
#X connect 28 0 33 0;
#X connect 29 0 30 0;
#X connect 30 0 34 0;
#X connect 31 0 32 0;
#X connect 32 0 35 0;
#X connect 36 0 24 0;
#X connect 37 0 27 0;
#X connect 38 0 29 0;
#X connect 39 0 31 0;
#X connect 40 0 41 0;
#X connect 41 0 30 0;
#X connect 41 0 32 0;
#X connect 41 0 28 0;
#X connect 41 0 25 0;
#X restore 334 39 pd vegas;
#X connect 2 0 5 0;
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 3 0;
#X connect 5 1 4 0;
#X restore 1117 73 pd initialize;
#X text 132 599 Fig 1 - Pd Code for Adding Two Numbers;
#X text 542 599 Fig 2 - Pseudo-Code for Adding Two Numbers in a "Traditional"
Programming Language, f 85;
#X text 14 74 THE283 Sound Art, f 24;
#X text 59 34 Pd Basics for the "Fundamentals of Acoustics" Interactive
Text, f 76;
#X text 11 165 In order to be able to create art with a medium \, you
need to understand how that medium works. When we paint \, we understand
that combining blue and yellow will give us a resulting color that
is a shade of green. It is just as important to understand how sound
works \, in order create sound art. For the first area of study in
this course \, we will investigate acoustics and psychoacoustics \,
which examines the physical properties of sound and the way sound is
perceived. But instead of reading a text on these topics \, I have
developed interactive texts which allow you to actively experiment
and investigate these aspects of sound \, in order to illustrate the
concepts more vividly. The interactive texts were developed in a programming
language called Pure Data \, and this introductory text will go over
some of the basics of Pure Data \, and how to interact with the elements
in the interactive text., f 172;
#X text 11 860 For years Pd started as one \, very sparse \, light-weight
environment \, that guaranteed that all programs would work as new
versions came out (backward compatability) \, it worked for Mac \,
PC \, and Linux \, and \, with recent developments \, the language
could run as the audio code for applications built for iOS \, Android
\, Unity \, the Web \, and more., f 172;
#X text 11 1200 For the introductory acoustics demonstrations for our
class \, you should use Purr Data as that is guaranteed to open the
files (though a Pure Data Vanilla version of the files is included
with every download)., f 172;
#X text 11 835 -------- Pure Data Vanilla --------;
#X text 8 912 The only downside to these rather strict rules \, is
that the development isn't drastic. In fact visually it looks very
plain \, and from a usability standpoint \, its not the easiest software
to pick up., f 172;
#X text 10 960 -------- Pd-Extended --------;
#X text 6 991 To make up for the downsides of Pure Data \, Pd-Extended
was developed \, and it had a better-looking interface and it included
nearly EVERY possible extension developed for it by 3rd parties \,
and it was much easier to use. With this development \, the original
Pd \, became known colloquially as Pd Vanilla., f 172;
#X text 8 1042 As a non-commercial software \, Pd-Extended fell into
disrepair because not enough volunteers were developing it (open-source
software doesn't make a lot of money \, so it can't really pay its
developers)., f 172;
#X text 7 1123 A few years ago \, a group of computer science and electronic
music scholars at Virgina Tech started to develop their own flavor
of Pd \, that would be tailored specifically for the V-Tech Linux Laptop
Orchestra (or l2Ork). This version was a lot like Pd-Extended \, but
it was kept in development. For years this branch of Pd was Linux only
\, and was called Pd-l2ork (catchy right?). But in the past two years
Pd-l2ork has been ported over Mac and Windows \, and has been given
the Purr Data \, because it sounds like "Pure Data" \, and the internet
loves cats. Note that the name Pd-l2Ork is still used for some areas
of Purr Data \, so you should understand that the two are the same
programs., f 172;
#X text 10 1089 -------- Pd-l2ork a.k.a. Purr Data --------;
#X text 2 4065 Audio Engine: In Pd you need to turn audio processing
on to hear sounds. The demonstrations I build for you SHOULD turn the
audio on automatically (i.e. I have built a mechanism to turn it on
for you). However you may need to set your audio output. In Purr Data
you need to go to the Edit menu and choose "Preferences" and then set
the audio driver and channel in the "Audio" tab. In the lab we have
audio interfaces \, and so you will want to choose the Behringer UMC
interfaces in order to connect your headhphones \, but at home you
likely want to use the built in audio. To set audio in Pd Vanilla:
Go to the MEDIA menu and choose "Audio Settings" \, then in the pop
up window choose your output driver (Core Audio for Mac \, ASIO for
Windows \, ??? for Linux (Jack??)) \, and then the output channel (usually
headphones is ideal)., f 173;
#X text 2 4166 Edit mode: Technically a Pd program is also working
Pd code. The way Pd code is written is that you insert objects into
the blank canvas \, then you LOCK or DISABLE EDIT/EDIT MODE. If for
some reason you unlock the patch \, or I have forgotten to save it
in the locked state \, go to the Edit Menu and disable "Edit" or "Edit
Mode". You will be able to tell if you are in edit mode because you
also won't be able to change any user interface controls \, they will
react to you clicking by assuming you are editing them! If you accidentally
make edits \, and then accidentally save the file \, DON'T PANIC. Just
delete the file(s) and re-download them from Blackboard., f 173;
#X text 2 4249 Disclaimer: The programs developed for this class are
early iterations of the programs. There is VERY likely bugs in the
programs. I tried to test them the best I could \, but they were all
completed from very different and much more basic programs from previous
semesters. There will likely be typos. They also haven't been tested
on many platforms \, mostly just my own computer. That being said \,
I think this way is a much more intuitive way to read about acoustics
over me having you read a textbook \, and each concept has hands on
examples in the programs \, so I think this will be a very powerful
way to learn these concepts! Of course if you run into ANY problems
whatsoever \, contact me immediately!!, f 173;
#X obj 1220 35 cnv 15 41 2829 empty empty empty 20 12 0 14 -233017
-66577 0;
#X text -1 3990 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 174;
#X text -1 4030 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 174;
#X text 6 1248 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 173;
#X obj 9 98 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 20 118 Introduction, f 24;
#X text 10 139 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 10 96 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X obj 10 269 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 11 310 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 11 267 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 21 289 What is Pure Data?, f 24;
#X obj 10 767 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 11 808 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 11 765 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 21 787 Pd Vanilla? Purr Data? Pd-l2ork? Pd-Extended?, f 49
;
#X obj 6 1271 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 7 1312 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 7 1269 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 17 1291 Using Pd, f 24;
#X text 8 1336 - In Pd \, objects are boxes that have specific functions
(they aren't exactly like objects in object oriented programming like
C++ and Java... but then sometimes they are, f 172;
#X text 8 1372 - A Pd file is called a patch \, and the editor is called
the Patcher (not sure if that is 100% true \, but thats what they are
called in Max, f 172;
#X text 10 1409 - You place objects in the patcher with the put menu
(Put->Object) \, the object follows the mouse until you click in blank
space, f 172;
#X obj 30 1485;
#X text 70 1484 <-- empty object;
#X text 10 1431 - From this point you can type the name of an object
OR click away and place an empty object in the patcher. Click again
on the blank box to type an object's name., f 172;
#X obj 236 1485 metro;
#X text 277 1484 <-- [metro] object;
#X text 10 1523 - Every object has a name. To see a list of the built
in objects \, click Help->List of objects (vanilla) or Help->Quick
Reference (Purr). When referring to an object in this text \, it will
be written in brackets: [objectname], f 172;
#X obj 7 1899 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 8 1940 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 8 1897 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 16 1919 Object Communication, f 24;
#X text 7 1964 - Objects pass information to each other through patch
cords \, which are lines drawn between objects \, linking them., f
172;
#X text 7 1989 - Objects may have inlets \, the small rectangles at
the top of their box that are used for receiving data from another
object \, while an object may also have outlets \, small rectanbles
on the bottom of the box \, used for sending information., f 172;
#X obj 45 2058 +;
#X text 45 2085 ^-- outlet(s);
#X text 45 2029 v-- inlet(s);
#X text 7 2114 - You connect outlets to inlets by placing the cursor
over an outlet \, in which case the cursor will change its icon \,
then you click and drag (the icon will change again \, indicating that
you are currently dragging a patch cable) \, until you reach an inlet
\, where the cursor will change its icon again \, and then you can
release the mouse and a line will be drawn between the two objects.
, f 172;
#X text 7 2169 - Below are four objects \, one which is our [+] object
\, the other three are known as NUMBER BOXES (in Pd \, they aren't
actually objects... at least they aren't objects you can call by name
in a blank object \, like you can in Max). Number boxes are tools which
let us interactively change and send numbers \, as well as display
numbers., f 172;
#X text 7 2209 - Connect the number box labelled "A" to the left inlet
of the [+] object \, collect the box labelled "B" to the right inlet
of [+] \, and connect the outlet of [+] to the inlet of the box labelled
"C". You have now built an addition algorithm! Leave edit mode and
you can click and drag the number boxes. Click and drag on the box
labelled "B" \, then click and drag on "A" \, and the sum will print
in "C"., f 172;
#X floatatom 40 2301 5 0 0 0 - - -, f 5;
#X floatatom 121 2299 5 0 0 0 - - -, f 5;
#X obj 81 2335 +;
#X floatatom 81 2372 5 0 0 0 - - -, f 5;
#X text 24 2300 A;
#X text 158 2300 B;
#X text 117 2370 C;
#X floatatom 47 3341 5 0 0 0 - - -, f 5;
#X obj 225 3339 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X text 98 3338 <- Number;
#X text 287 3336 <- Number2 (shows more digits);
#X text 6 3212 - You have already seen one way to send a a number as
a message \, through the number box (Put-> Number or Number2). You
can click and drag to change the number \, or shift and drag to change
it by a fractional part. Or you can click on the box and type a new
number in \, hitting RETURN will produce the number out the outlet.
All numbers in Pd are signed floating point numbers., f 128;
#X obj 47 3383 print;
#X obj 225 3382 print;
#X text 284 3383 <-- The [print] object will print anything it recieves
in the Pd console., f 74;
#X text 6 3430 - A more general purpose tool for sending messages is
the Message box. It can store numbers \, symbols \, lists \, and more.
Insert a message box through Put-> Message, f 128;
#X obj 31 3517 print;
#X obj 201 3513 print;
#X obj 386 3512 print;
#X text 70 3494 <-- number;
#X text 242 3490 <-- symbol;
#X text 459 3491 <-- list;
#X msg 31 3495 33;
#X msg 201 3491 hello;
#X msg 386 3490 hi 5 guys;
#X text 6 3260 - Also note the [print] object. This is a SUPER handy
object for displaying messages \, calculations \, and general debugging.
For the most part \, anything you send to [print] will appear the in
the Pd Window (the window you see when you start Pd \, or Window->Pd
Window ... note that in Purr Data the window is labelled "Purr Data"
but is still called the Pd Window in the menu)., f 128;
#X obj 6 3149 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 7 3190 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 7 3147 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 15 3169 Messages, f 24;
#X text 7 3618 - Message boxes can also have a REPLACEABLE element.
It is signified by the symbol "\$1". When the message box receives
a separate message \, it constructs a full message replacing whatever
was sent to it for "\$1". When you send a list to a message box \,
you can replace multiple elements \, using \$1 \, \$2 \, \$3 etc...
, f 128;
#X floatatom 37 3699 5 0 0 0 - - -, f 5;
#X msg 37 3720 hi \$1;
#X obj 37 3742 print;
#X obj 148 3742 print;
#X text 288 3694 <-----------;
#X text 371 3689 Without going down a rabbit hole \, lists in Pd (and
Max) always start with numbers \, but you can explicitly set a group
of symbols to be a list by inserting "list" before the actual list.
In fact \, ALL Pd messages are delivered this way \, with an indicator
before the message describing the data type... we just generally don't
need it and we often ignore it. Its one of the more confusing asepcts
of Pd.;
#X text 7 3806 - One message that gets sent/used a lot is the message
"Bang". It is a unique message to Pd and Max \, and it means "Hey \,
do something". Certain objects respond to "bang" \, other objects output
a bang \, as illustrated below:, f 128;
#X obj 43 3866 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 69 3864 <-- Bang object (Put-> Bang) is a UI object that issues
a "bang" message, f 34;
#X obj 43 3912 print;
#X obj 337 3865 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 337 3915 random 10;
#X floatatom 337 3937 5 0 0 0 - - -, f 5;
#X text 361 3862 <-- the [random] object responds to the "bang" message
, f 22;
#X msg 575 3864 1;
#X obj 575 3916 metro 500;
#X text 613 3862 <-- [metro] outputs a bang every x ms when it is activated
, f 21;
#X msg 148 3696 list won two;
#X msg 148 3720 check \$1 \$2;
#X obj 3 3549 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 4 3590 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 4 3547 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 12 3569 Messages (Continued), f 24;
#X obj 71 2531 vsl 15 128 0 127 0 1 \$0-vsl-r empty empty 0 -9 0 10
-204800 -1 -1 4800 1;
#X obj 118 2574 hsl 128 15 0 127 0 1 \$0-hsl-r empty empty -2 -8 0
10 -204800 -1 -1 4600 1;
#X obj 71 2665 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-vsl-r empty 0 -8
0 10 -262144 -1 -1 0 256 0;
#X obj 115 2591 nbx 5 14 -1e+37 1e+37 0 0 empty \$0-hsl-r empty 0 -8
0 10 -262144 -1 -1 0 256 0;
#X text 117 2692 Sliders;
#X text 26 2793 Most sliders will have a numerical display of the value
it is outputting. The values output can be a wide range of numbers
\, all depending on the slider's function., f 40;
#X text 429 2694 Number Boxes;
#X text 368 2749 Click and drag in them and you will change AND output
an integer value., f 36;
#X text 368 2794 Hold SHIFT while clicking and dragging and you will
output floating point decimal numbers., f 37;
#X text 367 2849 Finally \, click inside the number box \, (it will
turn red in Pd-Vanilla) type your desired number via the computer keyboard
\, then hit RETURN (*not* enter) \, and the number will be output and
displayed., f 37;
#X obj 428 2571 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -204800 -1 -1 0 256 0;
#X text 760 2689 Buttons;
#X text 681 2711 Click them \, something will happen!;
#X obj 739 2591 bng 15 250 50 0 \$0-bang-r \$0-bang-r empty 17 7 0
10 -204800 -1 -1;
#X text 1031 2687 Toggles;
#X text 956 2709 Toggles can be one state (on \, checked \, etc) \,
or another (off \, unchecked). I usually use these for choices., f
33;
#X obj 978 2591 tgl 15 0 \$0-toggle-r empty empty 17 7 0 10 -204800
-1 -1 0 1;
#X text 6 2468 Asides from clicking on boxes that contain subwindows
for chapter subsections \, you will interact with real-time demonstrations.
For the interactive demonstrations \, you will typically be clicking
\, clicking and dragging \, or typing numbers into the following constructs.
Any control that is intended to be interactive will be shaded blue.
Feel free to click any of the controls below., f 173;
#X obj 730 2638 bng 15 250 50 0 empty \$0-button1-s empty 17 7 0 10
-262144 -1 -1;
#X text 763 2590 <-Click me;
#X obj 760 2638 bng 15 250 50 0 empty \$0-button2-s empty 17 7 0 10
-262144 -1 -1;
#X obj 790 2638 bng 15 250 50 0 empty \$0-button3-s empty 17 7 0 10
-262144 -1 -1;
#X obj 820 2638 bng 15 250 50 0 empty \$0-button4-s empty 17 7 0 10
-262144 -1 -1;
#X obj 985 2638 cnv 15 25 25 empty \$0-colorful_canvas1-s empty 20
12 0 14 -166441 -262144 0;
#X obj 1025 2638 cnv 15 25 25 empty \$0-colorful_canvas2-s empty 20
12 0 14 -166441 -262144 0;
#X obj 1065 2638 cnv 15 25 25 empty \$0-colorful_canvas3-s empty 20
12 0 14 -166441 -262144 0;
#X obj 1105 2638 cnv 15 25 25 empty \$0-colorful_canvas4-s empty 20
12 0 14 -166441 -262144 0;
#X obj 428 2640 + 15;
#X obj 428 2661 nbx 8 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X text 98 2549 CLick and drag to move sliders;
#X text 393 2537 Click and drag or click and type to enter a number.
, f 27;
#X text 1000 2590 <- Click to toggle on/off, f 29;
#X text 383 2962 Fig 4 - Various interactive graphical user interface
controls, f 84;
#X text 27 2714 Click and drag inside the rectangle to move the small
dark line that emulates a slider's knob like on a physical controller.
, f 40;
#X text 369 2716 Number boxes work in three ways:;
#X obj 6 2402 cnv 15 1210 60 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 7 2443 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 7 2400 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
, f 172;
#X text 17 2422 User Interface Controls, f 24;
#X text 9 1560 - Use the space below to experiment with inserting objects
into this patch. Go to the Edit menu click on Edit Mode to enter Edit
Mode \, then go to Put->Object to put a blank object into this space
\, then type the name of an object. Some common objects in Pd are [metro]
\, [osc~] \, [bng] (that last object will change to a user-interface
\, a button that sends the message "bang"), f 172;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 79 0 84 0;
#X connect 80 0 85 0;
#X connect 94 0 88 0;
#X connect 95 0 89 0;
#X connect 96 0 90 0;
#X connect 103 0 104 0;
#X connect 104 0 105 0;
#X connect 110 0 112 0;
#X connect 113 0 114 0;
#X connect 114 0 115 0;
#X connect 117 0 118 0;
#X connect 120 0 121 0;
#X connect 121 0 106 0;
#X connect 136 0 153 0;
#X connect 153 0 154 0;
