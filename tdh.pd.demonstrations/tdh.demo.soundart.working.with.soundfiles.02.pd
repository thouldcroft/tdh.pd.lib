#N canvas 1969 -82 1414 832 10;
#N canvas 0 22 450 300 (subpatch) 0;
#X array sound1 155944 float 0 black black;
#X coords 0 1 155943 -1 200 140 1;
#X restore 43 495 graph;
#X obj 18 10 cnv 15 775 48 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 23 35 THE283 - Sound Art;
#X text 23 13 Working with Audio Files in Pd;
#X text 21 67 - Working with audio files takes a bit of configuration
\, but once built \, you can do some very interesting things with audio
files in Pd, f 128;
#X text 21 103 - One thing you might ask yourself is \, "Why wouldn't
I just use a DAW to work with audio files?, f 128;
#X text 42 125 - Generally \, working with audio files in a DAW produces
a linear product. You make work non-linearly \, but the final produced
element is linear - it has a start \, a middle \, an end, f 124;
#X text 42 195 - You can produce works that will run for a long time
on a low-cost device (RPi or Mobile device), f 124;
#X text 43 161 - Working with audio files in Pd allows you to produce
works that are indeterminate (meaning that you leave decision making
up to the computer), f 124;
#X text 43 217 - You can create sequences that would be difficult to
produce/automate in a DAW (play this section \, loop it x-times \,
go to this section \, then back to the first section \, then on to
a third section \, back to the first \, etc.), f 124;
#X obj 17 266 cnv 15 774 26 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 23 271 Arrays;
#X text 17 294 - Arrays are blocks of stored data, f 128;
#X text 18 351 - Pd also has the [table] object \, and the differences
between the two are subtle \, the most important is that data is saved
in [garray]s, f 128;
#X text 18 316 - Arrays are technically [garray]s \, graphical arrays
that get placed into the patcher. Note that the [array] object is NOT
an array \, it is an object to access array data, f 128;
#X text 18 386 -To place an array in the patcher \, use Put-> Array.
A window will pop up with options to define the array \, but just concern
yourself with the name... everything else can be changed later., f
128;
#N canvas 0 22 450 300 (subpatch) 0;
#X array sound2 124439 float 0 black black;
#X coords 0 1 124438 -1 200 140 1;
#X restore 302 493 graph;
#X text 18 651 - Fill the arrray with the [soundfiler] object, f 128
;
#X obj 165 767 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 199 766 <-- sends the "bang" message;
#X obj 165 787 openpanel;
#X msg 165 809 read \$1 sound1;
#X obj 165 831 soundfiler;
#X text 58 862 - The only issue here is if the sound is smaller or
bigger than your array. So its best to use the optional flag "-resize"
to tell [soundfiler] to resize the array, f 128;
#X obj 164 898 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 164 918 openpanel;
#X obj 164 962 soundfiler;
#X msg 164 940 read -resize \$1 sound1;
#X obj 22 1027 cnv 15 774 26 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 28 1032 Soundfile playback objects;
#X text 24 1067 - The [tabplay~] object is the most straightforward
way to play a sound file, f 128;
#X text 44 1097 - [tablplay]'s argument is which array to read from.
Then simply send it the "bang" message \, and you sound will be output
, f 128;
#X obj 153 1133 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 153 1186 dac~ 1 2;
#X obj 153 1153 tabplay~ sound1;
#X obj 384 1471 samplerate~;
#X obj 384 1446 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 37 1649 5 0 0 0 - - -, f 5;
#X floatatom 242 1802 5 0 0 0 - - -, f 5;
#X obj 242 1841 * 1000;
#X floatatom 242 1886 5 0 0 0 - - -, f 5;
#X obj 242 1751 /;
#X floatatom 384 1501 5 0 0 0 - - -, f 5;
#X text 428 1502 <-- sample rate (samples per second);
#X text 277 1802 <-- array duration in seconds;
#X text 292 1888 <-- array duration in ms;
#X obj 265 2870 dac~ 1 2;
#X obj 265 2816 line~;
#X obj 22 4937 cnv 15 774 26 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 28 4942 Fade in and Fade Out;
#X obj 36 5269 dac~ 1 2;
#X obj 36 5124 line~;
#X obj 36 5240 *~;
#X obj 36 5384 tabread4~ sound;
#X obj 36 5455 dac~ 1 2;
#X obj 36 5360 line~;
#X msg 36 5338 0 \, 193108 4378;
#X obj 36 5426 *~;
#X obj 188 5392 line~;
#X msg 188 5363 0 \, 0.8 500;
#X text 268 5362 <-- this will create a ramp from 0 to 0.8 over 500
milliseconds \, creating a 500 ms fade in, f 48;
#X obj 43 5691 tabread4~ sound;
#X obj 43 5762 dac~ 1 2;
#X obj 43 5667 line~;
#X msg 43 5645 0 \, 193108 4378;
#X obj 43 5733 *~;
#X obj 195 5699 line~;
#X msg 195 5670 0 \, 0.8 500;
#X obj 43 5567 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 43 5587 trigger bang bang;
#X obj 58 5976 tabread4~ sound;
#X obj 58 6047 dac~ 1 2;
#X obj 58 5952 line~;
#X msg 58 5930 0 \, 193108 4378;
#X obj 58 6018 *~;
#X obj 210 5984 line~;
#X msg 210 5955 0 \, 0.8 500;
#X obj 58 5852 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 58 5872 trigger bang bang;
#X msg 308 5955 0 500;
#X obj 21 3040 cnv 15 774 26 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 22 3478 - Since the line that drives [tabread4~] sets the start
and end point of the portion you are reading \, you don't have to read
the entire array... in fact you only need to read a portion of it,
f 128;
#X obj 84 4205 dac~ 1 2;
#X obj 84 4110 line~;
#X obj 320 3821 samplerate~;
#X obj 338 3710 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 245 3899 5 0 0 0 - - -, f 5;
#X obj 245 3918 * 1000;
#X obj 245 3878 /;
#X floatatom 319 3854 5 0 0 0 - - -, f 5;
#X text 313 3944 <-- array duration in ms;
#X floatatom 257 3669 5 0 0 0 - - -, f 5;
#X floatatom 222 3706 5 0 0 0 - - -, f 5;
#X obj 242 3738 -;
#X text 151 3707 Portion end;
#X text 88 3669 Portion start (enter first);
#X floatatom 242 3765 5 0 0 0 - - -, f 5;
#X text 148 3763 poriton length;
#X obj 245 3799 float;
#X obj 337 3756 trigger bang bang;
#X text 209 4087 <-- portion_start \, portion_end time_in_ms;
#X text 58 421 - Arrays are easily the most confusing aspect of Pd.
Just when I think I understand them throughly \, I find out something
new and I'm back to square one again. Long story short \, don't go
too far down the rabbit hole with these objects while you are starting
out... just think of them as empty vessels which you can store the
amplitude points of a signal in (and remember \, a digital audio file
is simply a sequence of amplitude points... just many \, many points)!
, f 122;
#X text 38 673 - Soundfiler expects a message that says "read <filepath/mysound.wav>
<destination_array>" (replace anything between <> with specifics),
f 136;
#X text 38 695 - We can use the replaceable element function of messages
to build a message that [soundfiler] prefers with the [openpanel] object
, f 132;
#X text 58 717 - When you send [openpanel] the message "bang" \, your
OS open dialogue will appear \, and whichever file you pick \, [openpanel]
will output its path when you click "open", f 128;
#X text 267 808 <-- read the path from [openpanel] \, replace "\$1"
with the path \, send the full message, f 88;
#X text 58 987 - All of [soundfiler]s details are in the help file.
In fact \, I just discovered it can WRITE as well as read files!,
f 128;
#X text 22 1225 - [tabread4~] gives you more control over the speed
of playback \, with some additional work, f 93;
#X text 48 1251 - To read through your sound file using [tabread4~]
\, you send index values as a signal from 0 to the length of your array.
You can find out the size by right clicking on your array. To send
index values AT SIGNAL RATE \, use [line~] (not to be confused with
[line] \, its control rate counterpart, f 128;
#X text 89 1357 - To do this: take the size of the array \, divide
by the sample rate to get the duration in seconds (sample rate is x
samples in one second) \, then multiply by 1000 to get the length in
milliseconds (there are 1000 ms in a second)., f 121;
#X obj 37 1432 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 37 1579 openpanel;
#X obj 37 1623 soundfiler;
#X msg 37 1601 read -resize \$1 sound1;
#X text 465 1428 Step 1:;
#X text 465 1450 <-- send "bang" to the [samplerate] object and it
will report the [samplerate] automatically (vs you looking it up in
the preferences), f 62;
#X text 76 1650 <-- array length;
#X text 60 1430 Step 2:;
#X text 60 1452 [soundfiler] will report the size in samples of the
sound you are reading \, and we used [openpanel] to find the sound
file path earlier \, which can be super annoying to do otherwise \,
so we send "bang" top [openpanel] and the result is soundfiler reporting
the file's size in samples (along with loading up our array), f 42
;
#X text 46 1310 - To play the whole sound file at normal speed \, you
need to determine how long in millseconds your array is \, so you can
tell [line~] to ramp from 0 to array_size over the right amount of
time in milliseconds, f 128;
#X text 275 1749 Step 3: Divide the array length (sound file length
in samples) by the sampling rate and get the duration of the sound
in seconds;
#X text 294 1842 Step 4: Convert the duration of the array in seconds
to milliseconds by multiplying the duration by 1000;
#X obj 265 2840 tabread4~ sound1;
#X text 46 1945 - Now you just need to format a message for [line~]
, f 128;
#X text 86 1967 - line expects a message with only 1 or 2 elements:
, f 128;
#X text 126 1989 - Element 1: destination value, f 128;
#X text 126 2011 - Element 2: Time (in millseconds) over which to ramp
from whatever number [line~] is currently on to the newly determined
destination number, f 128;
#X text 86 2049 - So the message "5000 1000" tells line to ramp from
its current number (which is 0 by default) to 5000 over 1 second (1000
ms), f 128;
#X msg 89 2080 5000 1000;
#X obj 89 2144 snapshot~;
#N canvas 0 22 450 300 snapshot_helper 0;
#X obj 158 45 loadbang;
#X msg 158 67 1;
#X obj 158 89 metro 100;
#X obj 158 111 outlet;
#X obj 92 45 loadbang;
#X msg 92 67 0;
#X obj 92 89 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X restore 178 2115 pd snapshot_helper;
#X floatatom 91 2171 5 0 0 0 - - -, f 5;
#X obj 89 2102 line~;
#X text 174 2138 [snapshot~] allows us to convert to control rate so
we can see the number change \, and the object labelled "snapshot_helper"
is just some hidden code to display and help this demo without clutter
;
#X obj 91 2280 snapshot~;
#N canvas 0 22 450 300 snapshot_helper 0;
#X obj 158 45 loadbang;
#X msg 158 67 1;
#X obj 158 89 metro 100;
#X obj 158 111 outlet;
#X obj 92 45 loadbang;
#X msg 92 67 0;
#X obj 92 89 outlet;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 4 0 5 0;
#X connect 5 0 6 0;
#X restore 180 2251 pd snapshot_helper;
#X floatatom 93 2307 5 0 0 0 - - -, f 5;
#X obj 91 2238 line~;
#X text 306 2244 A typical trick we use with either [line(~)] objects
is the fact that a message box will send out two sequential messages
divided with a comma. So the message "0 \, 2000 3000" tells [line]
to go immediately to 0 \, then ramp from 0 up to 2000 over 3000 milliseconds
;
#X msg 91 2216 0 \, 2000 3000;
#X obj 300 2486 samplerate~;
#X obj 159 2434 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X floatatom 285 2646 5 0 0 0 - - -, f 5;
#X obj 285 2665 * 1000;
#X obj 285 2625 /;
#X floatatom 300 2506 5 0 0 0 - - -, f 5;
#X text 344 2507 <-- sample rate (samples per second);
#X text 320 2646 <-- array duration in seconds;
#X text 391 2684 <-- array duration in ms;
#X obj 159 2523 openpanel;
#X obj 159 2567 soundfiler;
#X msg 159 2545 read -resize \$1 sound1;
#X text 258 2590 <-- array length;
#X obj 159 2454 trigger bang bang;
#X text 86 2350 - This uses the code from before to read the "harvey_bell.aiff"
file into the array "sound1". We use the [trigger] object to make sure
we determine the sampling rate BEFORE we determine the array length
\, because the array length reporting causes the division between array
length and sampling rate to actually happen. Reporting the sampling
rate doesn't cause anything to happen \, the [/] object just sits there
with the number stored until it actually receives the array length
\, THEN calculations occur., f 128;
#X obj 159 2591 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 155944 256 0;
#X obj 285 2688 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 3536.15 256 0;
#X text 86 2714 - The above tells us that the array (sound file) is
3536.15 ms long, f 128;
#X text 86 2736 - To play the sound file back at regular speed \, we
need to send a stream of INDEX POINTS (the sample points to read from
in the array) at the SAME SPEED as the file was recorded... so send
the values 0-155944 (the length of the array in samples) over 3536.15
ms:, f 128;
#X msg 265 2794 0 \, 155944 3536.15;
#X text 86 2924 - Now we have two elements we can manipulate: playback
speed (playback duration and pitch) and array portion (i.e. splicing)
, f 128;
#X text 27 3045 Playback duration/pitch manipulation and Splicing;
#X text 22 3083 - Playback speed is the easiest element to manipulate
when you are playing the entire array... simply change the time you
read through the array and you will get a different playback speed
\, and thus a different duration and pitch, f 128;
#X text 72 3118 - If we use a replaceable symbol where the speed should
go \, we can change the speed with a number box. Each time you type
and then hit enter \, the sound will play back at indicated speed:
, f 128;
#X obj 238 3276 dac~ 1 2;
#X obj 238 3222 line~;
#X obj 238 3246 tabread4~ sound1;
#X msg 238 3200 0 \, 155944 \$1;
#X text 351 3195 Original speed: 3536.15 ms;
#X obj 237 3167 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 1000 256 0;
#X text 62 3528 - The only hiccup is that you need to calculate how
fast to read the PORTION (this will be a different than how fast it
takes to read the entire array) in order to play the portion at the
right speed, f 128;
#X text 62 3563 - In order to do this \, we just need to modify our
older algorithm that determined the speed to play back the entire array
\, and just use the length (in samples) of the portion as the array
length for our calculation, f 128;
#X text 128 3635 portion length = portion end point - portion start
point;
#X text 73 3800 The [float] object stores values until it receives
a "bang", f 22;
#X text 216 3800 -->;
#X text 358 3708 Once the portion length is determined \, click this
button to calculate the time of the portion in milliseconds \, based
on the sample rate;
#X text 62 4038 - Once you know the time it ms to playback the portion
\, you can plug those values into a message box, f 128;
#X obj 84 4134 tabread4~ sound1;
#X obj 311 4538 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X floatatom 380 4565 5 0 0 0 - - -, f 5;
#X obj 242 4506 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#N canvas 0 22 450 300 random_portion_length 0;
#X obj 180 -181 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1
0 1;
#X obj 181 -146 metro 500;
#X floatatom 236 -180 5 0 0 0 - - -, f 5;
#X obj 181 -85 random;
#X obj 223 -7 / 2;
#X obj 316 -150 samplerate~;
#X obj 316 -179 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 315 -204 loadbang;
#X obj 181 -8 +;
#X obj 316 -128 t f f;
#X obj 316 -69 * 2;
#X obj 316 -20 -;
#X text 17 -74 The smallest duration size will be 1/2 second \, so
we offset the random numbers (which will be between 0 and MAX) by adding
our lowest value \, which is samplingrate/2., f 23;
#X obj 133 -181 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 423 -40 The maximum random value will be 2 seconds \, which
is sampling rate * 2 \, but we also offset the value by 1/2 second
\, so we need the max to actually be (samplingrate * 2) - (samplingrate/2)
;
#X obj 224 35 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 22050 256 0;
#X obj 353 -42 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 88200 256 0;
#X obj 360 7 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 66150 256 0;
#X obj 182 83 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 23814 256 0;
#X text 245 80 portion length;
#X obj 130 -205 inlet;
#X obj 178 -206 inlet;
#X obj 233 -205 inlet;
#X obj 181 112 outlet;
#X connect 0 0 1 0;
#X connect 1 0 3 0;
#X connect 2 0 1 1;
#X connect 3 0 8 0;
#X connect 4 0 8 1;
#X connect 4 0 11 1;
#X connect 4 0 15 0;
#X connect 5 0 9 0;
#X connect 6 0 5 0;
#X connect 7 0 6 0;
#X connect 8 0 18 0;
#X connect 9 0 10 0;
#X connect 9 1 4 0;
#X connect 10 0 11 0;
#X connect 10 0 16 0;
#X connect 11 0 3 1;
#X connect 11 0 17 0;
#X connect 13 0 3 0;
#X connect 18 0 23 0;
#X connect 20 0 13 0;
#X connect 21 0 0 0;
#X connect 22 0 2 0;
#X restore 242 4597 pd random_portion_length;
#X text 340 4534 Automatic portion generatrion;
#X text 418 4564 Automatic portion generation rate;
#X text 270 4505 Get single random portion;
#X obj 240 4622 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 23814 256 0;
#N canvas 635 223 450 346 calculate_portion_time 0;
#X obj 194 156 samplerate~;
#X obj 120 40 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 119 234 5 0 0 0 - - -, f 5;
#X obj 119 253 * 1000;
#X obj 119 213 /;
#X floatatom 193 189 5 0 0 0 - - -, f 5;
#X obj 119 134 float;
#X obj 119 86 trigger bang bang;
#X obj 120 0 inlet;
#X obj 117 283 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 540 256 0;
#X obj 117 302 outlet;
#X obj 282 9 inlet;
#X connect 0 0 5 0;
#X connect 1 0 7 0;
#X connect 2 0 3 0;
#X connect 3 0 9 0;
#X connect 4 0 2 0;
#X connect 5 0 4 1;
#X connect 6 0 4 0;
#X connect 7 0 6 0;
#X connect 7 1 0 0;
#X connect 8 0 1 0;
#X connect 9 0 10 0;
#X connect 11 0 6 1;
#X restore 240 4680 pd calculate_portion_time;
#X obj 240 4702 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 540 256 0;
#X text 304 4621 portion length;
#X text 305 4699 portion time in ms;
#X obj 241 4730 trigger bang bang bang float;
#X obj 240 4643 trigger bang float float;
#N canvas 0 22 450 300 calculate_portion_from_random_start 0;
#X obj 389 183 float;
#X text 433 182 portion length;
#X obj 591 190 float;
#X text 628 189 portion time in ms;
#X obj 153 70 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 153 90 random;
#X text 5 84 picks starting point \, between 0 and array length, f
22;
#X obj 197 231 pack float float float;
#X obj 155 122 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 23503 256 0;
#X obj 235 84 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 124439 256 0;
#X obj 616 82 inlet;
#X obj 560 83 inlet;
#X obj 483 81 inlet;
#X obj 393 91 inlet;
#X obj 151 8 inlet;
#X obj 196 266 outlet;
#X obj 202 35 receive sound2_arraylen;
#X connect 0 0 7 1;
#X connect 2 0 7 2;
#X connect 4 0 5 0;
#X connect 5 0 8 0;
#X connect 7 0 15 0;
#X connect 8 0 7 0;
#X connect 10 0 2 1;
#X connect 11 0 2 0;
#X connect 12 0 0 1;
#X connect 13 0 0 0;
#X connect 14 0 4 0;
#X connect 16 0 5 1;
#X connect 16 0 9 0;
#X restore 241 4777 pd calculate_portion_from_random_start;
#X obj 242 4892 dac~ 1 2;
#X obj 242 4837 line~;
#X msg 242 4815 \$1 \, \$2 \$3;
#X obj 186 4801 print;
#X text 314 4798 <-- outputs a list that is portion_start portion_end
speed;
#X text 21 4280 - The question likely on your mind: why would I want
to do this with Pd vs Reaper?, f 128;
#X text 71 4303 - Valid question \, and some things are best done in
Reaper, f 128;
#X text 71 4325 - Some things can't be done in Reaper:, f 128;
#X text 155 4369 - Picks a random portion length between 500 ms and
2000 ms, f 128;
#X text 111 4347 - This is a sample granulator/mangler. By clicking
a single button it performs the following:, f 128;
#X obj 242 4861 tabread4~ sound2;
#N canvas 0 22 450 300 load_sound2_array 0;
#X obj 329 51 samplerate~;
#X obj 188 -1 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 314 211 5 0 0 0 - - -, f 5;
#X obj 314 230 * 1000;
#X obj 314 190 /;
#X floatatom 329 71 5 0 0 0 - - -, f 5;
#X obj 188 88 openpanel;
#X obj 188 132 soundfiler;
#X obj 188 19 trigger bang bang;
#X obj 188 156 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 124439 256 0;
#X obj 314 253 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 2821.75 256 0;
#X msg 188 110 read -resize \$1 sound2;
#X obj 161 195 send sound2_arraylen;
#X obj 197 -29 inlet;
#X connect 0 0 5 0;
#X connect 1 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 10 0;
#X connect 4 0 2 0;
#X connect 5 0 4 1;
#X connect 6 0 11 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 8 1 0 0;
#X connect 9 0 4 0;
#X connect 9 0 12 0;
#X connect 11 0 7 0;
#X connect 13 0 1 0;
#X restore 42 4544 pd load_sound2_array;
#X obj 42 4521 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 155 4391 - Calculates the speed it takes to playback that portion
, f 128;
#X text 155 4413 - Picks a random start point between the start of
the array and the end of the array, f 128;
#X text 155 4435 - Formats a message for [line~] to playback the portion
at the correct speed, f 128;
#X text 155 4457 - Performs all of this from a single button click
OR automatically with a defined rate, f 128;
#X obj 241 3943 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 442.177 256 0;
#X msg 84 4088 500 \, 20000 442.1;
#X text 23 4985 - [line~] object also allows you to create fades in
and out \, as it will output a ramp of values from one point to another
, f 93;
#X text 23 5020 - It is common to scale an audio signal by multiplying
the signal by by a range of values between 0 and 1.0. Multiplying by
0 gives us silence \, while multiplying by 1 gives us full volume.
Multiply by 0.5 and we get half the amplitude, f 93;
#X floatatom 74 5201 5 0 1 0 - - -, f 5;
#X text 113 5200 Multiply by 0 to 1 to adjust the amplitude of the
signal (shift click and drag to get floating point numbers);
#N canvas 0 0 450 300 (subpatch) 0;
#X array sound3 100 float 1 black black;
#A 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0;
#X coords 0 1 99 -1 200 140 1;
#X restore 565 492 graph;
#X obj 36 5148 tabread4~ sound3;
#X obj 185 5086 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#N canvas 0 22 450 300 load_sound3_array 1;
#X obj 329 51 samplerate~;
#X obj 188 -1 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X floatatom 314 211 5 0 0 0 - - -, f 5;
#X obj 314 230 * 1000;
#X obj 314 190 /;
#X floatatom 329 71 5 0 0 0 - - -, f 5;
#X obj 188 88 openpanel;
#X obj 188 132 soundfiler;
#X obj 188 19 trigger bang bang;
#X obj 188 156 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X obj 314 253 nbx 10 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X msg 188 110 read -resize \$1 sound2;
#X obj 197 -29 inlet;
#X obj 314 272 outlet;
#X obj 188 205 outlet;
#X connect 0 0 5 0;
#X connect 1 0 8 0;
#X connect 2 0 3 0;
#X connect 3 0 10 0;
#X connect 4 0 2 0;
#X connect 5 0 4 1;
#X connect 6 0 11 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 8 1 0 0;
#X connect 9 0 4 0;
#X connect 9 0 14 0;
#X connect 10 0 13 0;
#X connect 11 0 7 0;
#X connect 12 0 1 0;
#X restore 185 5109 pd load_sound3_array;
#X obj 332 5137 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X text 388 5135 time in ms;
#X obj 187 5138 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256 0;
#X text 240 5136 array length;
#X msg 36 5102 0 \, 0 0;
#X text 23 5308 - [line~] can create ramps for you automatically \,
so you can fade in and out..., f 93;
#X text 33 5494 - The key to this is synchronizing \, and also not
using a fade in time that is too long. The trigger object will accept
a single input message \, and send out other messages in order from
left to right. First trigger the fade in and then immediately trigger
the sound playback, f 92;
#X text 33 5796 - You can add a fade out as well. We don't use "0 \,
" because we don't need to specify where to start the line down...
this message tells line "wherever you are \, now ramp down to 0 over
500 ms", f 92;
#X text 731 6210 c;
#X connect 18 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 24 0 25 0;
#X connect 25 0 27 0;
#X connect 27 0 26 0;
#X connect 32 0 34 0;
#X connect 34 0 33 0;
#X connect 34 0 33 1;
#X connect 35 0 42 0;
#X connect 36 0 35 0;
#X connect 37 0 41 0;
#X connect 38 0 39 0;
#X connect 39 0 40 0;
#X connect 41 0 38 0;
#X connect 42 0 41 1;
#X connect 47 0 122 0;
#X connect 51 0 217 0;
#X connect 52 0 50 0;
#X connect 52 0 50 1;
#X connect 53 0 57 0;
#X connect 55 0 53 0;
#X connect 56 0 55 0;
#X connect 57 0 54 0;
#X connect 57 0 54 1;
#X connect 58 0 57 1;
#X connect 59 0 58 0;
#X connect 61 0 65 0;
#X connect 63 0 61 0;
#X connect 64 0 63 0;
#X connect 65 0 62 0;
#X connect 65 0 62 1;
#X connect 66 0 65 1;
#X connect 67 0 66 0;
#X connect 68 0 69 0;
#X connect 69 0 64 0;
#X connect 69 1 67 0;
#X connect 70 0 74 0;
#X connect 72 0 70 0;
#X connect 73 0 72 0;
#X connect 74 0 71 0;
#X connect 74 0 71 1;
#X connect 75 0 74 1;
#X connect 76 0 75 0;
#X connect 77 0 78 0;
#X connect 78 0 73 0;
#X connect 78 1 76 0;
#X connect 79 0 75 0;
#X connect 83 0 177 0;
#X connect 84 0 89 0;
#X connect 85 0 99 0;
#X connect 86 0 87 0;
#X connect 87 0 210 0;
#X connect 88 0 86 0;
#X connect 89 0 88 1;
#X connect 91 0 93 1;
#X connect 92 0 93 0;
#X connect 93 0 96 0;
#X connect 96 0 98 1;
#X connect 98 0 88 0;
#X connect 99 0 98 0;
#X connect 99 1 84 0;
#X connect 110 0 111 0;
#X connect 111 0 113 0;
#X connect 112 0 37 0;
#X connect 113 0 112 0;
#X connect 122 0 46 0;
#X connect 122 0 46 1;
#X connect 128 0 132 0;
#X connect 129 0 131 0;
#X connect 130 0 132 0;
#X connect 130 1 129 0;
#X connect 132 0 129 0;
#X connect 134 0 136 0;
#X connect 135 0 137 0;
#X connect 135 1 134 0;
#X connect 137 0 134 0;
#X connect 139 0 137 0;
#X connect 140 0 145 0;
#X connect 141 0 153 0;
#X connect 142 0 143 0;
#X connect 143 0 156 0;
#X connect 144 0 142 0;
#X connect 145 0 144 1;
#X connect 149 0 151 0;
#X connect 150 0 155 0;
#X connect 151 0 150 0;
#X connect 153 0 149 0;
#X connect 153 1 140 0;
#X connect 155 0 144 0;
#X connect 159 0 47 0;
#X connect 165 0 166 0;
#X connect 166 0 164 0;
#X connect 166 0 164 1;
#X connect 167 0 165 0;
#X connect 169 0 167 0;
#X connect 177 0 82 0;
#X connect 177 0 82 1;
#X connect 178 0 181 1;
#X connect 179 0 181 2;
#X connect 180 0 181 0;
#X connect 181 0 185 0;
#X connect 185 0 191 0;
#X connect 186 0 187 0;
#X connect 187 0 190 0;
#X connect 190 0 192 0;
#X connect 190 1 192 1;
#X connect 190 2 192 3;
#X connect 190 3 192 4;
#X connect 191 0 186 0;
#X connect 191 1 186 1;
#X connect 191 2 192 2;
#X connect 192 0 195 0;
#X connect 192 0 196 0;
#X connect 194 0 203 0;
#X connect 195 0 194 0;
#X connect 203 0 193 0;
#X connect 203 0 193 1;
#X connect 205 0 204 0;
#X connect 211 0 83 0;
#X connect 214 0 52 1;
#X connect 217 0 52 0;
#X connect 218 0 219 0;
#X connect 219 0 222 0;
#X connect 219 1 220 0;
#X connect 224 0 51 0;
