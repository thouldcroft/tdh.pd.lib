#N canvas 386 23 939 855 10;
#X obj 366 297 soundfiler;
#N canvas 0 22 450 278 (subpatch) 0;
#X array sound 193108 float 2;
#X coords 0 1 193108 -1 200 140 1 0 0;
#X restore 461 79 graph;
#X msg 366 271 read -resize ../Audio_Test_Files/monkey.wav sound;
#X obj 8 267 readsf~;
#X obj 8 306 dac~ 1 2;
#X msg 45 221 1;
#X msg 90 241 0;
#X text 14 32 Method 1: [readsf~];
#X text 10 -35 Working with Sound Files in Pd ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
, f 94;
#X text 8 100 2 Send [readsf~] the message;
#X text 6 115 [ open ../yourFolder/yourfile.wav (;
#X text 6 139 3 Send [readsf~] a [ 1 ( message to play audio \, and
a [ 0 ( to stop, f 42;
#X text 7 61 1 Create a folder with your test sound files. Add the
folder to your search path., f 42;
#X text 369 38 1 Use the "Put" message to place an array \, and name
it "sound" in the name creation dialog, f 46;
#X text 366 225 2 Use the [soundfiler] object and send it the message:
, f 42;
#X text 366 251 [ read -resize ../yourFolder/yourSound.wav sound (
;
#X obj 369 434 dac~ 1 2;
#X obj 369 411 tabplay~ sound;
#X obj 369 346 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X text 364 314 3 Create a [tabplay~] object \, with the argument "sound
\, and send it a "bang", f 47;
#X msg 464 379 500 3000;
#X obj 384 797 tabread4~ sound;
#X obj 384 827 dac~ 1 2;
#X msg 758 587 193108;
#X obj 758 608 / 44100;
#X floatatom 758 629 5 0 0 0 - - -, f 5;
#X text 533 366 You can also define a block of time in samples that
you want to read from by defining a starting sample and then how many
samples past that you want to read, f 41;
#X obj 758 648 * 1000;
#X floatatom 758 673 5 0 0 0 - - -, f 5;
#X text 373 490 [tabread4~] gives you more control over the speed of
playback;
#X text 782 1423 I need my space;
#X obj 384 773 line~;
#X msg 689 -16 \; pd dsp \$1;
#X text 407 519 To read through your sound file \, you send a index
values as a signal from 0 to the length of your array. You can find
out the size by right clicking on your array. To send index values
\, use [line~];
#X msg 384 751 0 \, 193108 4378;
#X obj 386 937 tabread4~ sound;
#X obj 386 967 dac~ 1 2;
#X obj 386 913 line~;
#X msg 386 891 0 \, 193108 1000;
#X obj 538 941 tabread4~ sound;
#X obj 538 971 dac~ 1 2;
#X obj 538 917 line~;
#X msg 538 895 0 \, 193108 8000;
#X text 666 892 Change the speed of playback by reading through the
array at a faster or slower speed than "normal" speed;
#X obj 386 1094 tabread4~ sound;
#X obj 386 1124 dac~ 1 2;
#X obj 386 1070 line~;
#X text 523 1041 You can read back only a chunk of the sound file \,
but you need to do the math from above (and determine the total number
of samples in your chunk) to playback at "normal" speed;
#X obj 1165 1044 / 44100;
#X floatatom 1165 1065 5 0 0 0 - - -, f 5;
#X obj 1165 1084 * 1000;
#X floatatom 1165 1109 5 0 0 0 - - -, f 5;
#X text 1044 1042 sample rate -->;
#X text 947 1064 array duration in seconds -->;
#X text 968 1083 convert to millseconds -->;
#X text 981 1107 array duration in ms -->;
#X text 1044 1023 chunk length -->;
#X msg 1165 1023 11000;
#X msg 386 1048 1000 \, 12000 249.4;
#X text 334 15 ---------------------------------------------------------------------------
, f 1;
#X obj 689 -34 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 372 18 Method 2: array/table reading with [tabplay~]----------------------------------------------------------
, f 108;
#X text 365 467 Method 2a: array/table reading with [tabread4~]------------------------------------------------------------
, f 108;
#X msg 8 198 open ../Audio_Test_Files/monkey.wav;
#X text 405 586 To play the whole sound file at normal speed \, you
need to determine how long in millseconds your array is \, so you can
tell [line~] to rampe from 0 to array_size over the right amount of
time. To do this: take the size of the array \, divide by the sample
rate to get the duration in seconds (sample rate is x samples in one
second) \, then multiply by 1000 to get the length in milliseconds.
, f 47;
#X text 818 610 <-- sample rate (samples per second);
#X text 819 632 <-- array duration in seconds;
#X text 816 652 <-- convert to millseconds;
#X text 818 674 <-- array duration in ms;
#X text 817 587 <-- array length (change this to your array size);
#X text 513 746 After you tell line to create a ramp with [line~] \,
it will stay on that number. This little trick will reset [line~] back
to 0 \; it essentially sends two messages: first it sends 0 (resetting
line back to 0) \, then says ramp to 193108 over 4378 ms (NOTE THAT
THE ARRAY SIZE AND TIME IN MS WILL DIFFER FOR EACH SOUND FILE);
#X connect 2 0 0 0;
#X connect 3 0 4 0;
#X connect 3 0 4 1;
#X connect 5 0 3 0;
#X connect 6 0 3 0;
#X connect 17 0 16 0;
#X connect 17 0 16 1;
#X connect 18 0 17 0;
#X connect 20 0 17 0;
#X connect 21 0 22 0;
#X connect 21 0 22 1;
#X connect 23 0 24 0;
#X connect 24 0 25 0;
#X connect 25 0 27 0;
#X connect 27 0 28 0;
#X connect 31 0 21 0;
#X connect 34 0 31 0;
#X connect 35 0 36 0;
#X connect 35 0 36 1;
#X connect 37 0 35 0;
#X connect 38 0 37 0;
#X connect 39 0 40 0;
#X connect 39 0 40 1;
#X connect 41 0 39 0;
#X connect 42 0 41 0;
#X connect 44 0 45 0;
#X connect 44 0 45 1;
#X connect 46 0 44 0;
#X connect 48 0 49 0;
#X connect 49 0 50 0;
#X connect 50 0 51 0;
#X connect 57 0 48 0;
#X connect 58 0 46 0;
#X connect 60 0 32 0;
#X connect 63 0 3 0;
